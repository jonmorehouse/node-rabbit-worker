// Generated by CoffeeScript 1.6.3
(function() {
  var Manager, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  Manager = (function(_super) {
    __extends(Manager, _super);

    /*
      @opts = 
        queue: required - queue to subscribe to (required)
        error: a writable stream that can be written to  (optional)
        logger: a logging writable stream  (optional)
        simultaneous: number of simultaneous workers that we can have
    */


    function Manager(opts) {
      this.opts = opts;
      if ((this.opts == null) || (this.opts.queue == null)) {
        throw new Error("Missing required parameters");
      }
      [this._createErrorStream, this._createLogStream, this._createTaskHandler, this._createTaskSubscriber];
      Manager.__super__.constructor.apply(this, arguments);
    }

    Manager.prototype.close = function() {};

    Manager.prototype._read = function(size) {};

    Manager.prototype._write = function() {};

    Manager.prototype._createErrorStream = function(cb) {};

    Manager.prototype._createLogStream = function(cb) {};

    Manager.prototype._createTaskHandler = function(cb) {};

    Manager.prototype._createTaskSubscriber = function(cb) {};

    return Manager;

  })(stream.Readable);

  module.exports = Manager;

}).call(this);
