// Generated by CoffeeScript 1.6.3
(function() {
  var ErrorHandler, LogHandler, Manager, async, stream,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  async = require('async');

  ErrorHandler = require('./error_handler');

  LogHandler = require('./log_handler');

  Manager = (function(_super) {
    __extends(Manager, _super);

    /*
      @opts = 
        queue: required - queue to subscribe to (required)
        error: a writable stream that can be written to  (optional)
        logger: a logging writable stream  (optional)
        simultaneous: number of simultaneous workers that we can have
    */


    function Manager(opts, cb) {
      var err, methods,
        _this = this;
      this.opts = opts;
      this._createLogStream = __bind(this._createLogStream, this);
      this._createErrorStream = __bind(this._createErrorStream, this);
      Manager.__super__.constructor.apply(this, arguments);
      if ((this.opts == null) || (this.opts.queue == null)) {
        err = new Error("Missing required parameters");
        if (cb != null) {
          return cb(err);
        }
        throw err;
      }
      methods = [this._createErrorStream, this._createLogStream, this._createTaskHandler, this._createTaskSubscriber];
      async.waterfall(methods, function(err) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
        return typeof cb === "function" ? cb() : void 0;
      });
    }

    Manager.prototype.close = function() {};

    Manager.prototype._read = function(size) {};

    Manager.prototype._write = function() {};

    Manager.prototype._createErrorStream = function(cb) {
      if (this.opts.errors != null) {
        this.error = this.opts.error;
        return typeof cb === "function" ? cb() : void 0;
      }
      this.error = new ErrorHandler();
      return typeof cb === "function" ? cb() : void 0;
    };

    Manager.prototype._createLogStream = function(cb) {
      if (this.opts.logger != null) {
        this.logger = this.opts.logger;
        return typeof cb === "function" ? cb() : void 0;
      }
      this.logger = new LogHandler();
      return typeof cb === "function" ? cb() : void 0;
    };

    Manager.prototype._createTaskHandler = function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    };

    Manager.prototype._createTaskSubscriber = function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    };

    return Manager;

  })(stream.Readable);

  module.exports = Manager;

}).call(this);
