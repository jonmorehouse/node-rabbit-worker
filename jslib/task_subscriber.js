// Generated by CoffeeScript 1.6.3
(function() {
  var TaskSubscriber, async, stream, uuid,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  async = require('async');

  uuid = require('uuid');

  TaskSubscriber = (function(_super) {
    __extends(TaskSubscriber, _super);

    function TaskSubscriber(queue, max, logger, error, cb) {
      var attr, err, _i, _len, _ref;
      this.queue = queue;
      this.max = max;
      this.logger = logger;
      this.error = error;
      TaskSubscriber.__super__.constructor.call(this, {
        objectMode: true
      });
      _ref = [this.queue, this.max, this.logger, this.error];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (attr == null) {
          err = new Error("Missing parameter");
          return typeof cb === "function" ? cb(err) : void 0;
          throw err;
        }
      }
      this.tasks = {};
      if (typeof cb === "function") {
        cb();
      }
    }

    TaskSubscriber.prototype._write = function(chk, size, enc) {
      return this._handleTask(chk);
    };

    TaskSubscriber.prototype._read = function(size) {
      var _this = this;
      return this.queue.subscribe({
        ack: true
      }, function(message, headers, deliveryInfo, messageObject) {
        var id, obj;
        id = uuid.v4();
        obj = {
          id: id,
          msg: message
        };
        _this.tasks[id] = true;
        return _this.push(obj);
      });
    };

    TaskSubscriber.prototype._handleTask = function(id) {
      if (this.tasks[id] != null) {
        delete this.tasks[id];
      } else {
        this.error.write(new Error("Invalid task handled " + id));
      }
      return this.queue.shift();
    };

    return TaskSubscriber;

  })(stream.Duplex);

  module.exports = TaskSubscriber;

}).call(this);
