// Generated by CoffeeScript 1.6.3
(function() {
  var TaskSubscriber, async, stream, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  async = require('async');

  uuid = require('uuid');

  TaskSubscriber = (function(_super) {
    __extends(TaskSubscriber, _super);

    function TaskSubscriber(queue, maxTasks, handler, logger, error, cb) {
      var attr, err, _i, _len, _ref;
      this.queue = queue;
      this.maxTasks = maxTasks;
      this.handler = handler;
      this.logger = logger;
      this.error = error;
      this._msgReciever = __bind(this._msgReciever, this);
      TaskSubscriber.__super__.constructor.call(this, {
        objectMode: true
      });
      _ref = [this.queue, this.maxTasks, this.logger, this.error, this.handler];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (attr == null) {
          err = new Error("Missing parameter");
          return typeof cb === "function" ? cb(err) : void 0;
          throw err;
        }
      }
      cb(null, this);
    }

    TaskSubscriber.prototype.close = function() {
      var us,
        _this = this;
      this.stopped = true;
      us = this.queue.unsubscribe(this.consumerTag);
      return us.addCallback(function() {
        return _this.push(null);
      });
    };

    TaskSubscriber.prototype._read = function(size) {
      var subscription,
        _this = this;
      if (!this.subscribed && !this.stopped) {
        this.subscribed = true;
        subscription = this.queue.subscribe({
          ack: true,
          prefetchCount: this.maxTasks
        }, this._msgReciever);
        subscription.addCallback(function(ok) {
          return _this.consumerTag = ok.consumerTag;
        });
        return this.queue.on("basicQosOk", function(data) {
          var emit;
          return emit = _this.emit("ready");
        });
      }
    };

    TaskSubscriber.prototype._msgReciever = function(message, headers, deliveryInfo, messageObject) {
      var id;
      id = uuid.v1();
      messageObject.id = id;
      this.handler.write(messageObject);
      return this.push({
        id: id,
        headers: headers,
        msg: message
      });
    };

    return TaskSubscriber;

  })(stream.Readable);

  module.exports = TaskSubscriber;

}).call(this);
