// Generated by CoffeeScript 1.6.3
(function() {
  var TaskSubscriber, async, stream,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  async = require('async');

  TaskSubscriber = (function(_super) {
    __extends(TaskSubscriber, _super);

    function TaskSubscriber(queue, max, logger, error, cb) {
      var attr, err, _i, _len, _ref,
        _this = this;
      this.queue = queue;
      this.max = max;
      this.logger = logger;
      this.error = error;
      this._bootstrap = __bind(this._bootstrap, this);
      TaskSubscriber.__super__.constructor.call(this, {
        objectMode: true
      });
      _ref = [this.queue, this.max, this.logger, this.error];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (attr == null) {
          err = new Error("Missing parameter");
          return typeof cb === "function" ? cb(err) : void 0;
          throw err;
        }
      }
      this.tasks = {};
      this._bootstrap(function() {
        return typeof cb === "function" ? cb(null, _this) : void 0;
      });
    }

    TaskSubscriber.prototype._bootstrap = function(cb) {
      return typeof cb === "function" ? cb() : void 0;
    };

    TaskSubscriber.prototype._write = function(chk, size, enc) {};

    TaskSubscriber.prototype._read = function(size) {
      var _this = this;
      this.push("HERE");
      return this.queue.subscribeRaw(function(msg) {
        return p("MSG RECIEVED");
      });
    };

    return TaskSubscriber;

  })(stream.Duplex);

  module.exports = TaskSubscriber;

}).call(this);
